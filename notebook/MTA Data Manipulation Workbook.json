{
	"name": "MTA Data Manipulation Workbook",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mtasparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d6c86742-8d39-405f-812b-f2f235abc228"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5ed90db2-31fb-43a4-a4f5-e58fff72a675/resourceGroups/MTA-pipeline/providers/Microsoft.Synapse/workspaces/mta-pipeline-workspace/bigDataPools/mtasparkpool",
				"name": "mtasparkpool",
				"type": "Spark",
				"endpoint": "https://mta-pipeline-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mtasparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false
					},
					"collapsed": false
				},
				"source": [
					"#load wifi data\n",
					"\n",
					"from pyspark.sql.functions import when\n",
					"\n",
					"response_df = spark.read.csv('abfss://files@mtapipelinestorage.dfs.core.windows.net/wifi_locations/MTA_Wi-Fi_Locations_20241223.csv', header=True, inferSchema=True)\n",
					"\n",
					"\n",
					"response_df = response_df.withColumn(\"is_historical\",when(response_df.IS_HISTORICAL == 'Yes', True).when(response_df.IS_HISTORICAL == 'No', False)) \\\n",
					".withColumn(\"wifi_available\",when(response_df.WIFI_AVAILABLE == 'Yes', True).when(response_df.WIFI_AVAILABLE == 'No', False)) \\\n",
					".withColumn(\"att\",when(response_df.ATT == 'Yes', True).when(response_df.ATT == 'No', False)) \\\n",
					".withColumn(\"sprint\",when(response_df.SPRINT == 'Yes', True).when(response_df.SPRINT == 'No', False)) \\\n",
					".withColumn(\"tmobile\",when(response_df.TMOBILE == 'Yes', True).when(response_df.TMOBILE == 'No', False))\n",
					"\n",
					"\n",
					"response_df.createOrReplaceTempView(\"wifi_stations\")\n",
					"\n",
					"station_df = spark.sql(\"SELECT STATION AS StationName, STATION_COMPLEX AS StationComplex, BOROUGH AS Borough, is_historical AS IsHistorical,wifi_available as WifiAvailable, CASE WHEN att = True \\\n",
					"  OR sprint = True \\\n",
					"  OR tmobile = True THEN True ELSE False END AS ServiceAvailable\\\n",
					"    FROM wifi_stations\")\n",
					"station_df.createOrReplaceTempView(\"station_data\")\n",
					"#display(station_df.limit(5))\n",
					"\n",
					"display(station_df.schema.fields)\n",
					"station_df.write.mode(\"overwrite\").parquet(\"/updated_data/station_data\")"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#load rider data\n",
					"\n",
					"from pyspark.sql.types import FloatType\n",
					"\n",
					"response_df = spark.read.csv('abfss://files@mtapipelinestorage.dfs.core.windows.net/rider_data/Rider_data.csv', header=True, inferSchema=True)\n",
					"\n",
					"response_df = response_df.withColumn(\"transfers\",response_df.transfers.cast(FloatType()))\n",
					"\n",
					"response_df.createOrReplaceTempView(\"rider_data\")\n",
					"\n",
					"#CAST(transit_timestamp AS DATE) AS RideDate,\n",
					"# transfers AS Transfers\n",
					"rider_df = spark.sql(\"SELECT CAST(transit_timestamp AS DATE) AS RideDate, station_complex AS StationComplex,\\\n",
					" transit_mode AS TransitMode, payment_method AS PaymentMethod, fare_class_category AS FareClassCategory,\\\n",
					" transfers AS Transfers\\\n",
					" FROM rider_data\")\n",
					"\n",
					"display(rider_df.limit(5))\n",
					"\n",
					"display(rider_df.schema.fields)\n",
					"rider_df.write.mode(\"overwrite\").parquet(\"/updated_data/rider_data\")\n",
					"\n",
					""
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#join dataframes\n",
					"# joint_df = spark.sql(\"SELECT CAST(r.transit_timestamp AS DATE) AS date, r.station_complex, s.is_historical, s.wifi_available, CASE WHEN s.att = True OR s.sprint = True OR s.tmobile = True THEN True ELSE False END AS service_available FROM rider_data r JOIN station_data s ON r.station_complex = s.station_complex\")\n",
					"# joint_df.createOrReplaceTempView(\"joint_data\")\n",
					"# joint_df = spark.sql (\"SELECT YEAR(date) AS year, MONTH(date) AS month, DAY(date) AS day, date, station_complex, is_historical, wifi_available, service_available FROM joint_data WHERE YEAR(date) = 2024\")\n",
					"# display(joint_df.limit(5))"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#write modified data to parquet\n",
					"# joint_df.write.partitionBy(\"Month\").mode(\"overwrite\").parquet(\"/updated_data\")"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}