{
	"name": "MTA Synapse Notebook",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mtasparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1192f207-7891-46f2-94f5-cbd45654daf3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5ed90db2-31fb-43a4-a4f5-e58fff72a675/resourceGroups/MTA-pipeline/providers/Microsoft.Synapse/workspaces/mta-pipeline-workspace/bigDataPools/mtasparkpool",
				"name": "mtasparkpool",
				"type": "Spark",
				"endpoint": "https://mta-pipeline-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mtasparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false
					},
					"collapsed": false
				},
				"source": [
					"#load wifi data\n",
					"\n",
					"from pyspark.sql.functions import when\n",
					"\n",
					"response_df = spark.read.csv('abfss://files@mtapipelinestorage.dfs.core.windows.net/wifi_locations/MTA_Wi-Fi_Locations_20241223.csv', header=True, inferSchema=True)\n",
					"\n",
					"\n",
					"response_df = response_df.withColumn(\"is_historical\",when(response_df.IS_HISTORICAL == 'Yes', True).when(response_df.IS_HISTORICAL == 'No', False)) \\\n",
					".withColumn(\"wifi_available\",when(response_df.WIFI_AVAILABLE == 'Yes', True).when(response_df.WIFI_AVAILABLE == 'No', False)) \\\n",
					".withColumn(\"att\",when(response_df.ATT == 'Yes', True).when(response_df.ATT == 'No', False)) \\\n",
					".withColumn(\"sprint\",when(response_df.SPRINT == 'Yes', True).when(response_df.SPRINT == 'No', False)) \\\n",
					".withColumn(\"tmobile\",when(response_df.TMOBILE == 'Yes', True).when(response_df.TMOBILE == 'No', False))\n",
					"\n",
					"#display(response_df.limit(5))\n",
					"response_df.schema.fields\n",
					"\n",
					"response_df.createOrReplaceTempView(\"wifi_stations\")\n",
					"\n",
					"wifi_df = spark.sql(\"SELECT STATION_COMPLEX AS station_complex, is_historical, BOROUGH AS borough, wifi_available, att, sprint, tmobile\\\n",
					"                      FROM wifi_stations\")\n",
					"display(wifi_df.limit(5))"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#load rider data\n",
					"\n",
					"response_df = spark.read.csv('abfss://files@mtapipelinestorage.dfs.core.windows.net/rider_data/Rider_data.csv', header=True, inferSchema=True)\n",
					"response_df.createOrReplaceTempView(\"rider_data\")\n",
					"\n",
					"timestamp_station_df = spark.sql(\"SELECT transit_timestamp, station_complex \\\n",
					" FROM rider_data\")\n",
					"display(timestamp_station_df.limit(10))"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#join dataframes\n",
					"joint_df = spark.sql(\"SELECT r.transit_timestamp, r.station_complex, r.is_historical\")"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}