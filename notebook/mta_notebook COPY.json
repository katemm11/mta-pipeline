{
	"name": "mta_notebook COPY",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c565fadf-5ea4-4f87-8576-62dba1cbfdb5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"cellMetadata": {
							"byteLimit": 2048000,
							"rowLimit": 10000
						},
						"nuid": "6bb28dc5-7755-49d7-8173-74d2a14885c8",
						"showTitle": false,
						"title": ""
					}
				},
				"source": [
					"import pandas as pd\n",
					"import requests\n",
					"import json\n",
					"\n",
					"# tenant_id = dbutils.secrets.get(scope=\"databricks-mta-scope\",key=\"mta-tenant-secret\")\n",
					"# application_id = dbutils.secrets.get(scope=\"databricks-mta-scope\", key=\"mta-application-id-secret\")\n",
					"# service_credential = dbutils.secrets.get(scope=\"databricks-mta-scope\",key=\"mta-secret\")\n",
					"\n",
					"\n",
					"# configs = {\"fs.azure.account.auth.type\": \"OAuth\",\n",
					"#            \"fs.azure.account.oauth.provider.type\": \"org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider\",\n",
					"#            \"fs.azure.account.oauth2.client.id\": application_id,\n",
					"#            \"fs.azure.account.oauth2.client.secret\": dbutils.secrets.get(scope = \"databricks-mta-scope\", key = \"mta-secret\"),\n",
					"#            \"fs.azure.account.oauth2.client.endpoint\": \"https://login.microsoftonline.com/\" + tenant_id + \"/oauth2/token\"}\n",
					"  \n",
					"# dbutils.fs.mount(\n",
					"#     source= \"abfss://container1@mtastorage2.dfs.core.windows.net\",\n",
					"#     mount_point= \"/mnt/mta-mount2\",\n",
					"#     extra_configs= configs)\n",
					""
				],
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"cellMetadata": {
							"byteLimit": 2048000,
							"rowLimit": 10000
						},
						"nuid": "34206cb7-280f-46c5-bb29-af58e996a694",
						"showTitle": false,
						"title": ""
					}
				},
				"source": [
					"#create wifi dataframe\n",
					"\n",
					"wifi_results_df = (spark\n",
					"    .read\n",
					"    .option(\"header\", \"true\")\n",
					"    .option(\"inferSchema\", \"true\")\n",
					"    .csv(\"/mnt/mta-mount2/mta-csv-data/MTA_Wi-Fi_Locations_20241001.csv\"))\n",
					"\n",
					"wifi_df = wifi_results_df.select(\"*\").toPandas()\n",
					"\n",
					"wifi_df = wifi_df.drop(columns = [\"STATION\", \"LINES\", \"BOROUGH\", \"COUNTY\", \"LATITUDE\", \"LONGITUDE\", \"Location\",\"Georeference\", \"WIFI_AVAILABLE\"])\n",
					"\n",
					"wifi_df.rename(columns={'STATION_COMPLEX': 'station_complex', 'ATT': 'att', \"SPRINT\":\"sprint\", \"TMOBILE\":\"tmobile\", \"VERIZON\":\"verizon\", \"IS_HISTORICAL\": \"is_historical\"}, inplace=True)"
				],
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"cellMetadata": {
							"byteLimit": 2048000,
							"rowLimit": 10000
						},
						"nuid": "d4af316b-2507-4852-94c8-01de9d997c5d",
						"showTitle": false,
						"title": ""
					}
				},
				"source": [
					"#create rider dataframe\n",
					"\n",
					"rider_data_response = requests.get(\"https://data.ny.gov/resource/wujg-7c2s.json\")\n",
					"data = rider_data_response.text\n",
					"parse_rider_json = json.loads(data)\n",
					"rider_data_list = []\n",
					"\n",
					"for response in parse_rider_json:\n",
					"    item = {\n",
					"    \"transit_date\": response.get(\"transit_timestamp\"),\n",
					"    \"station_complex\": response.get(\"station_complex\")\n",
					"    }\n",
					"    rider_data_list.append(item)\n",
					"\n",
					"rider_df = pd.DataFrame(rider_data_list)\n",
					"rider_df = rider_df.astype({\"transit_date\": \"datetime64[s]\"})"
				],
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"cellMetadata": {
							"byteLimit": 2048000,
							"rowLimit": 10000
						},
						"nuid": "f7334047-bac2-4d8d-a651-ec47fbf41d02",
						"showTitle": false,
						"title": ""
					}
				},
				"source": [
					"#combine data\n",
					"\n",
					"combined_df = rider_df.merge(wifi_df, left_on=\"station_complex\", right_on=\"station_complex\")\n",
					"combined_df = pd.eval(\"provider_available = (combined_df.att == 'Yes') or (combined_df.sprint == 'Yes') or (combined_df.verizon == 'Yes') or (combined_df.tmobile == 'Yes')\", target=combined_df)\n",
					"\n",
					"combined_df = combined_df.drop(columns = [\"station_complex\",\"att\", \"sprint\", \"verizon\", \"tmobile\"])\n",
					"spark_df = spark.createDataFrame(combined_df)\n",
					"\n",
					"#write back to ADLS\n",
					"spark_df.coalesce(1).write.csv(\"dbfs:/mnt/mta-mount2/updated_data\", mode=\"overwrite\")"
				],
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"cellMetadata": {
							"byteLimit": 2048000,
							"rowLimit": 10000
						},
						"nuid": "b400232f-c350-44b7-8aba-a94d324d939a",
						"showTitle": false,
						"title": ""
					}
				},
				"source": [
					""
				],
				"execution_count": 0
			}
		]
	}
}